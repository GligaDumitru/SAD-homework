{"version":3,"sources":["components/Sidebar.js","pages/Dashboard.js","components/ChartLine.js","components/Example2.jsx","pages/ExampleChart2.jsx","components/Example1.jsx","pages/ExampleChart1.jsx","components/Example3.jsx","pages/ExampleChart3.jsx","components/Example4.jsx","pages/ExampleChart4.jsx","components/Example5.jsx","pages/ExampleChart5.jsx","components/Example6.jsx","pages/ExampleChart6.jsx","App.js","reportWebVitals.js","index.js"],"names":["Sidebar","className","href","target","rel","color","map","example","index","to","exact","activeClassName","name","size","Dashboard","ripple","active","ChartLine","title","main","type","data","options","id","useEffect","ctx","document","getElementById","getContext","window","destroy","config","Chart","contentPosition","COLORS","Example2","props","useState","typeChart","setTypeChart","dataConfig","setDataConfig","optionsConfig","setOptionsConfig","setLabelsArrayConfig","setDataSetsArrayConfig","toggleShowChart","setToggleShowChart","fieldsToShow2","defeaultOptionsConfig","maintainAspectRatio","responsive","display","text","fontColor","legend","labels","align","position","tooltips","mode","intersect","hover","scales","xAxes","ticks","scaleLabel","labelString","gridLines","borderDash","borderDashOffset","zeroLineColor","zeroLineBorderDash","zeroLineBorderDashOffset","yAxes","drawBorder","informationArray","JSON","parse","stringify","shift","headersArray","hA","indexForValue","value","filter","item","includes","labelsArray","lA","dataSetsArray","dataRow","informationRow","label","backgroundColor","borderColor","fill","datasets","buttonType","rounded","block","iconOnly","onClick","toUpperCase","onChange","plugins","handleChangeChart","checked","ExampleChart2","url","setUrl","gid","setGid","setData","errors","setErrors","readRemoteFile","complete","results","length","outline","placeholder","e","Example1","ExampleChart1","Example3","ExampleChart3","console","log","Example4","ExampleChart4","Example5","ExampleChart5","Example6","ExampleChart6","App","path","component","from","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1d770be7.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Icon from \"@material-tailwind/react/Icon\";\nimport H6 from \"@material-tailwind/react/Heading6\";\n\nexport default function Sidebar() {\n  return (\n    <>\n      <div\n        className={`h-screen fixed top-0 md:left-0 overflow-y-auto flex-row flex-nowrap overflow-hidden shadow-xl bg-white w-64 z-10 py-4 px-6 transition-all duration-300`}\n      >\n        <div className=\"flex-col items-stretch min-h-full flex-nowrap px-0 relative\">\n          <a\n            href=\"/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"mt-2 text-center w-full inline-block\"\n          >\n            <H6 color=\"gray\">SAD HomeWork</H6>\n          </a>\n          <div className=\"flex flex-col\">\n            <hr className=\"my-4 min-w-full\" />\n\n            <ul className=\"flex-col min-w-full flex list-none\">\n\n              {\n                [1,2,3,4,5,6].map((example, index) => (<li key={index} className=\"rounded-lg mb-4\">\n                <NavLink\n                  to={`/example${example}`}\n                  exact\n                  className=\"flex items-center gap-4 text-sm text-gray-700 font-light px-4 py-3 rounded-lg\"\n                  activeClassName=\"bg-gradient-to-tr from-light-blue-500 to-light-blue-700 text-white shadow-md\"\n                >\n                  <Icon name=\"dashboard\" size=\"2xl\" />\n                  Example {example}\n                </NavLink>\n              </li>))\n              }\n            </ul>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport Tab from \"@material-tailwind/react/Tab\";\nimport TabList from \"@material-tailwind/react/TabList\";\nimport TabItem from \"@material-tailwind/react/TabItem\";\nimport TabContent from \"@material-tailwind/react/TabContent\";\nimport TabPane from \"@material-tailwind/react/TabPane\";\nimport H3 from \"@material-tailwind/react/Heading3\";\nimport Alert from \"@material-tailwind/react/Alert\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"mx-12 p-12\">\n      <Tab>\n        <TabList color=\"lightBlue\">\n          <TabItem ripple=\"light\" active={true}>\n            Detalii\n          </TabItem>\n        </TabList>\n        <TabContent>\n          <TabPane active={true}>\n            <H3 color=\"lightBlue\"> Asistarea deciziilor pentru un spital</H3>\n            <Alert color=\"blueGray\">\n              Exemplu 1 : Evidentierea ponderii bolnavilor pe tipuri de bolnavi (tineri, adulti, venituri mari, venituri reduse etc.)\n            </Alert>\n            <Alert color=\"blueGray\">\n              Exemplu 2 : Determinarea celor mai frecvente diagnostice in ultime 30 zile, mergand din 7 in 7 zile\n            </Alert>\n            <Alert color=\"blueGray\">\n              Exemplu 3 : Estimarea numarului de paturi necesare in perioada urmatoare, pe tipuri de bolnavi si pe tipuri de afectiuni\n            </Alert>\n            <Alert color=\"blueGray\">\n              Exemplu 4 : Determinarea perioadelor aglomerate/lejere. Luand ca exemplu ultime 30 zile\n            </Alert>\n            <Alert color=\"blueGray\">\n              Exemplu 5 : Evidentierea ponderii bolnavilor de tipuri/subtipuri/clase de afectiuni\n            </Alert>\n            <Alert color=\"blueGray\">\n              Exemplu 6 : Evidentierea ponderii bolnavilor de tipuri/subtipuri/clase de afectiuni si in functie de gen M/F\n            </Alert>\n          </TabPane>\n        </TabContent>\n      </Tab>\n    </div>\n  );\n}\n","import { useEffect } from \"react\";\nimport Chart from \"chart.js\";\nimport Card from \"@material-tailwind/react/Card\";\nimport CardHeader from \"@material-tailwind/react/CardHeader\";\nimport CardBody from \"@material-tailwind/react/CardBody\";\n\nexport default function ChartLine({\n  title = \"\",\n  main = \"\",\n  type,\n  data,\n  options,\n  id\n}) {\n    \n  useEffect(() => {\n    var ctx = document.getElementById('customChartID').getContext(\"2d\");\n    if(window[id]){\n        window[id].destroy();\n    }\n    const config = {\n      type,\n      data,\n      options,\n    };\n\n    window[id] = new Chart(ctx, config);\n  }, [type, data]);\n\n  return (\n    <Card>\n      <CardHeader color=\"cyan\" contentPosition=\"left\">\n        <h6 className=\"uppercase text-gray-200 text-xs font-medium\">{main}</h6>\n        <h2 className=\"text-white text-2xl\">{title}</h2>\n      </CardHeader>\n      <CardBody>\n        <div className={`relative ${type === 'radar' ? 'h-500' : 'h-96'}`}>\n          <canvas id=\"customChartID\"></canvas>\n        </div>\n      </CardBody>\n    </Card>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"gray\",\n  \"orange\",\n  \"blue\",\n  \"indigo\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n];\n\nconst Example2 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Determinarea celor mai frecvente diagnostice\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\", \"DURATA\", \"id_zi\", \"tip\"];\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              2. Determinarea celor mai frecvente diagnostice in ultime 30 zile, mergand din 7 in 7 zile\n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-2-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"optionLine2\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine2\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example2;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example2 from \"../components/Example2\";\n\nexport default function ExampleChart2() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"1881625305\");\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert key for the Link from google sheets</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example2 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"teal\",\n  \"yellow\",\n  \"blue\",\n  \"green\",\n  \"red\",\n  \"teal\",\n  \"yellow\",\n  \"blue\",\n  \"green\",\n];\n\nconst Example1 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Evidentierea ponderii bolnavilor pe tipuri de bolnavi\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\", \"duration\"];\n\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              1. Evidentierea ponderii bolnavilor pe tipuri de bolnavi (tineri,\n              adulti, venituri mari, venituri reduse etc.)\n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"option22\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine1\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example1;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example1 from \"../components/Example1\";\n\nexport default function ExampleChart1() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"0\");\n\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">\n            Insert key for the Link from google sheets\n          </Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example1 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"gray\",\n  \"orange\",\n  \"blue\",\n  \"indigo\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n];\n\nconst Example3 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Estimarea paturilor in urmatoarea perioada\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\",\"duration\", \"DURATA\", \"id_zi\", \"tip\"];\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              3.Estimarea numarului de paturi necesare in perioada\nurmatoare, pe tipuri de bolnavi si pe tipuri de\nafectiuni\n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-3-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"optionLine3\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine3\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example3;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example3 from \"../components/Example3\";\n\nexport default function ExampleChart3() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"1368308247\");\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n            console.log(results.data)\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert key for the Link from google sheets</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example3 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"gray\",\n  \"orange\",\n  \"blue\",\n  \"indigo\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n];\n\nconst Example4 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Determinarea perioadelor aglomerate/lejere\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\", \"duration\", \"id_zi\", \"tip\"];\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              4.Determinarea perioadelor aglomerate/lejere. Luand ca exemplu ultime 30 zile \n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-5-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"optionLine5\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine4\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example4;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example4 from \"../components/Example4\";\n\nexport default function ExampleChart4() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"2122226844\");\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert key for the Link from google sheets</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example4 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"gray\",\n  \"orange\",\n  \"blue\",\n  \"indigo\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n];\n\nconst Example5 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Evidentierea ponderii bolnavilor de tipuri/subtipuri/clase de afectiuni\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\", \"duration\", \"id_zi\", \"tip\"];\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              5.Evidentierea ponderii bolnavilor de\ntipuri/subtipuri/clase de afectiuni\n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-5-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"optionLine5\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine5\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example5;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example5 from \"../components/Example5\";\n\nexport default function ExampleChart5() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"573792356\");\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert key for the Link from google sheets</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example5 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ChartLine from \"./ChartLine\";\nimport Paragraph from \"@material-tailwind/react/Paragraph\";\nimport Radio from \"@material-tailwind/react/radio\";\nimport Button from \"@material-tailwind/react/Button\";\nimport Icon from \"@material-tailwind/react/Icon\";\n\nconst COLORS = [\n  \"red\",\n  \"gray\",\n  \"orange\",\n  \"blue\",\n  \"indigo\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n  \"teal\",\n  \"cyan\",\n  \"black\",\n  \"indigo\",\n  \"red\",\n];\n\nconst Example6 = (props) => {\n  const [typeChart, setTypeChart] = useState(null);\n  const [dataConfig, setDataConfig] = useState(null);\n  const [optionsConfig, setOptionsConfig] = useState(null);\n  const [labelsArrayConfig, setLabelsArrayConfig] = useState(null);\n  const [dataSetsArray, setDataSetsArrayConfig] = useState(null);\n  const [toggleShowChart, setToggleShowChart] = useState(false);\n\n  const title = \"Evidentierea ponderii bolnavilor de tipuri/subtipuri/clase de afectiuni si in functie de gen M/F\";\n\n  const fieldsToShow2 = [\"ID_SPITAL\", \"duration\", \"id_zi\", \"tip\"];\n  const defeaultOptionsConfig = {\n    maintainAspectRatio: false,\n    responsive: true,\n    title: {\n      display: true,\n      text: title,\n      fontColor: \"lightBlue\",\n    },\n    legend: {\n      labels: {\n        fontColor: \"black\",\n      },\n      align: \"end\",\n      position: \"bottom\",\n    },\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n    },\n    hover: {\n      mode: \"nearest\",\n      intersect: true,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Month\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            display: false,\n            borderDash: [2],\n            borderDashOffset: [2],\n            color: \"rgba(33, 37, 41, 0.3)\",\n            zeroLineColor: \"rgba(0, 0, 0, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(17,17,17,.7)\",\n          },\n          display: true,\n          scaleLabel: {\n            display: false,\n            labelString: \"Value\",\n            fontColor: \"white\",\n          },\n          gridLines: {\n            borderDash: [3],\n            borderDashOffset: [3],\n            drawBorder: false,\n            color: \"rgba(17, 17, 17, 0.15)\",\n            zeroLineColor: \"rgba(33, 37, 41, 0)\",\n            zeroLineBorderDash: [2],\n            zeroLineBorderDashOffset: [2],\n          },\n        },\n      ],\n    },\n  };\n\n  useEffect(() => {\n    const { data } = props;\n\n    // create clone\n    let informationArray = JSON.parse(JSON.stringify(data));\n    // remove first row, with headers\n    informationArray.shift();\n\n    // get headers array\n    let headersArray = data[0];\n\n    // remove the fields that are not required but remember the index\n    headersArray = headersArray\n      .map((hA, index) => ({\n        indexForValue: index,\n        value: hA,\n      }))\n      .filter((item) => !fieldsToShow2.includes(item.value));\n\n    // show the id's of ospitals by id_spital\n    let labelsArray = informationArray.map((lA) => lA[0]);\n\n    const dataSetsArray = headersArray.map(\n      ({ indexForValue, value }, index) => {\n        const dataRow = informationArray.map(\n          (informationRow) => informationRow[indexForValue]\n        );\n\n        return {\n          label: value,\n          backgroundColor: `${COLORS[index]}`,\n          borderColor: `${COLORS[index]}`,\n          data: dataRow,\n          fill: false,\n        };\n      }\n    );\n    setTypeChart(\"line\");\n    setDataConfig({\n      labels: labelsArray,\n      datasets: dataSetsArray,\n    });\n\n    setOptionsConfig(defeaultOptionsConfig);\n    setLabelsArrayConfig(labelsArray);\n    setDataSetsArrayConfig(dataSetsArray);\n  }, [props]);\n\n  const handleChangeChart = (item) => {\n    switch (item) {\n      case \"radar\":\n        setOptionsConfig({\n          responsive: true,\n          plugins: {\n            title: {\n              display: true,\n              text: \"Chart.js Radar Chart\",\n            },\n          },\n        });\n        break;\n      default:\n        setOptionsConfig(defeaultOptionsConfig);\n    }\n    setTypeChart(item);\n  };\n\n  return (\n    <div className=\"px-3 md:px-8 mt-24\">\n      <div className=\"container mx-auto mb-16 max-w-full bg-gray-200\">\n        <div className=\"p-8 m-2\">\n          <div className=\"flex justify-between items-center\">\n            <Paragraph color=\"cyan\">\n              6.Evidentierea ponderii bolnavilor de\ntipuri/subtipuri/clase de afectiuni si in functie de gen M/F\n            </Paragraph>\n            <Button\n              color={`${!toggleShowChart ? \"red\" : \"blue\"}`}\n              buttonType=\"outline\"\n              size=\"regular\"\n              rounded={true}\n              block={false}\n              iconOnly={true}\n              ripple=\"dark\"\n              onClick={() => setToggleShowChart(!toggleShowChart)}\n            >\n              <Icon\n                name={`${!toggleShowChart ? \"arrow_upward\" : \"arrow_downward\"}`}\n                size=\"sm\"\n              />\n            </Button>\n          </div>\n\n          <div className={`${toggleShowChart && \"hidden \"} `}>\n            <div className=\"flex my-4\">\n              {[\"line\", \"bar\", \"horizontalBar\", \"radar\"].map((item, index) => (\n                <div className=\"inline-block p-2 m-2 \">\n                  <Radio\n                    color=\"lightBlue\"\n                    text={`${item.toUpperCase()} Chart`}\n                    id={`option-6-${index}`}\n                    onChange={() => handleChangeChart(item)}\n                    name=\"optionLine6\"\n                    value={item}\n                    checked={item === typeChart}\n                  />\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-12\">\n              {typeChart && (\n                <ChartLine\n                  title={title}\n                  main=\"Chart\"\n                  type={typeChart}\n                  data={dataConfig}\n                  options={optionsConfig}\n                  id=\"newLine6\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Example6;\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\nimport Input from \"@material-tailwind/react/Input\";\nimport Alert from \"@material-tailwind/react/Alert\";\nimport Example6 from \"../components/Example6\";\n\nexport default function ExampleChart6() {\n  const [url, setUrl] = useState(\n    \"1CIhln5kFddF4_fKt5yfhliN6j4EmaLuWfI29WB5NZCQ\"\n  );\n  const [gid, setGid] = useState(\"101787365\");\n  const [data, setData] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  useEffect(() => {\n    readRemoteFile(\n      `https://docs.google.com/spreadsheets/d/${url}/gviz/tq?tqx=out:csv&tq&gid=${gid}`,\n      {\n        complete: (results) => {\n          if (results.errors && results.errors.length > 0) {\n            setErrors(results.errors);\n          }\n          if (results.data && results.data.length > 0) {\n            setData(results.data);\n          }\n        },\n      }\n    );\n  }, [url, gid]);\n\n  return (\n    <>\n      <div className=\"px-3 md:px-8 h-40 block h-auto\">\n        <div className=\"block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert key for the Link from google sheets</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"key from url from google sheets\"\n            onChange={(e) => setUrl(e.target.value)}\n            value={url}\n          />\n        </div>\n        <div className=\"inline-block p-4 mb-4 \">\n          <Alert color=\"cyan\">Insert GID for sheet</Alert>\n          <Input\n            type=\"text\"\n            color=\"deepPurple\"\n            size=\"regular\"\n            outline={true}\n            placeholder=\"gid from google sheets\"\n            value={gid}\n            onChange={(e) => setGid(e.target.value)}\n          />\n        </div>\n      </div>\n      {data && data.length > 0 && <Example6 data={data} />}\n      {errors.length > 0 && <>{JSON.stringify(errors)}</>}\n    </>\n  );\n}\n","import { Switch, Route, Redirect } from 'react-router-dom';\nimport Sidebar from './components/Sidebar';\nimport Dashboard from './pages/Dashboard';\n\n// Tailwind CSS Style Sheet\nimport './assets/styles/tailwind.css';\nimport ExampleChart2 from './pages/ExampleChart2';\nimport ExampleChart1 from './pages/ExampleChart1';\nimport ExampleChart3 from './pages/ExampleChart3';\nimport ExampleChart4 from './pages/ExampleChart4';\nimport ExampleChart5 from './pages/ExampleChart5';\nimport ExampleChart6 from './pages/ExampleChart6';\n\nfunction App() {\n    return (\n        <>\n            <Sidebar />\n            <div className=\"md:ml-64\">\n                <Switch>\n                    <Route exact path=\"/\" component={Dashboard} />\n                    <Route exact path=\"/example1\" component={ExampleChart1} />\n                    <Route exact path=\"/example2\" component={ExampleChart2} />\n                    <Route exact path=\"/example3\" component={ExampleChart3} />\n                    <Route exact path=\"/example4\" component={ExampleChart4} />\n                    <Route exact path=\"/example5\" component={ExampleChart5} />\n                    <Route exact path=\"/example6\" component={ExampleChart6} />\n                    <Redirect from=\"*\" to=\"/\" />\n                </Switch>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}